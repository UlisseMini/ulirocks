<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Uli&#39;s blog</title>
		<link>http://uli.rocks/posts/</link>
		<description>Recent content in Posts on Uli&#39;s blog</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Wed, 30 Oct 2019 22:31:04 -0400</lastBuildDate>
		<atom:link href="http://uli.rocks/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>If Programming Languages Were Moms</title>
			<link>http://uli.rocks/posts/if-programming-languages-were-moms/</link>
			<pubDate>Wed, 30 Oct 2019 22:31:04 -0400</pubDate>
			
			<guid>http://uli.rocks/posts/if-programming-languages-were-moms/</guid>
			<description>This is clearly biased from the languages I like better, hopefully fun to read anyways.
Rust Is kindly and protective. A bit overreaching at times but you know its for your own good, and if you beg her she&#39;ll let you do whatever you want.
Haskell Is an overprotective parent, You might understand her rules better if you had a PhD in math and studied category theory though.
Python Is a huge proponent of teamwork, often when you want to do something she will immediately find 5 experts in the topic, she can be quite slow though if you need to do something yourself.</description>
			<content type="html"><![CDATA[<p>This is clearly biased from the languages I like better, hopefully fun to read anyways.</p>
<p><strong>Rust</strong> Is kindly and protective. A bit overreaching at times but you know its for your own good, and if you beg her she'll let you do whatever you want.</p>
<p><strong>Haskell</strong> Is an overprotective parent, You might understand her rules better if you had a PhD in math and studied category theory though.</p>
<p><strong>Python</strong> Is a huge proponent of teamwork, often when you want to do something she will immediately find 5 experts in the topic, she can be quite slow though if you need to do something yourself.</p>
<p><strong>Javascript</strong> Only uses email, she hates speaking directly as then she can't deal with other messages (single threaded)</p>
<p><strong>Go</strong> Is an expert in multitasking, In stark contrast to javascript she often keeps multiple conversations going at the same time while cooking and sweeping.</p>
<p>More are to come!, you can also send suggestions <a href="/about">here</a>.</p>
]]></content>
		</item>
		
		<item>
			<title>Nodejs Encryption</title>
			<link>http://uli.rocks/posts/nodejs-encryption/</link>
			<pubDate>Wed, 30 Oct 2019 21:39:20 -0400</pubDate>
			
			<guid>http://uli.rocks/posts/nodejs-encryption/</guid>
			<description>I hate javascript But I&#39;m using it to write a discord bot, for a few reasons (mostly the awesome discordjs api) I desided it was the easiest way to get my friends into programming via writing discord bots.
So, I thought it would be cool to add encryption-decryption functionality to my bot.
I&#39;m a perfectionist so I wanted nothing less then aes256-gcm + a good KDF (I picked scrypt), Since I&#39;m quite minimal, I desided to use the crypto package provided by node Instead of grabbing an insecure unmaintained package from npm.</description>
			<content type="html"><![CDATA[<h1 id="i-hate-javascript">I hate javascript</h1>
<p>But I'm using it to write a discord bot, for a few reasons (mostly the awesome <a href="https://discord.js.org">discordjs</a> api) I desided it was the easiest way to get my friends into programming via writing discord bots.</p>
<p>So, I thought it would be cool to add encryption-decryption functionality to my bot.</p>
<p>I'm a perfectionist so I wanted nothing less then <code>aes256-gcm</code> + a good KDF (I picked scrypt), Since I'm quite minimal, I desided to use the <a href="https://nodejs.org/api/crypto.html">crypto</a> package provided by node Instead of grabbing an insecure unmaintained package from npm.</p>
<p>Here Is the version I came up with after some iteration.</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">encrypt</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">passphrase</span><span class="p">)</span> <span class="p">{</span>
  <span class="kr">const</span> <span class="nx">salt</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">randomBytes</span><span class="p">(</span><span class="mi">32</span><span class="p">)</span>
  <span class="kr">const</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">scryptSync</span><span class="p">(</span><span class="nx">passphrase</span><span class="p">,</span> <span class="nx">salt</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>

  <span class="kr">const</span> <span class="nx">iv</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">randomBytes</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span>
  <span class="kr">const</span> <span class="nx">encrypter</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createCipheriv</span><span class="p">(</span><span class="s1">&#39;aes-256-gcm&#39;</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">iv</span><span class="p">)</span>

  <span class="kd">let</span> <span class="nx">encrypted</span> <span class="o">=</span> <span class="nx">encrypter</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">text</span><span class="p">)</span>
  <span class="nx">encrypted</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="p">[</span><span class="nx">encrypted</span><span class="p">,</span> <span class="nx">encrypter</span><span class="p">.</span><span class="kr">final</span><span class="p">(</span><span class="p">)</span><span class="p">]</span><span class="p">)</span>

  <span class="k">return</span> <span class="nx">Buffer</span><span class="p">.</span><span class="nx">concat</span><span class="p">(</span><span class="p">[</span><span class="nx">iv</span><span class="p">,</span> <span class="nx">encrypter</span><span class="p">.</span><span class="nx">getAuthTag</span><span class="p">(</span><span class="p">)</span><span class="p">,</span> <span class="nx">salt</span><span class="p">,</span> <span class="nx">encrypted</span><span class="p">]</span><span class="p">)</span><span class="p">.</span><span class="nx">toString</span><span class="p">(</span><span class="s1">&#39;base64&#39;</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">function</span> <span class="nx">decrypt</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="nx">passphrase</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// First we need to get iv, authtag, salt, ciphertext from base64.
</span><span class="c1"></span>  <span class="nx">text</span> <span class="o">=</span> <span class="nx">Buffer</span><span class="p">.</span><span class="nx">from</span><span class="p">(</span><span class="nx">text</span><span class="p">,</span> <span class="s1">&#39;base64&#39;</span><span class="p">)</span>

  <span class="kr">const</span> <span class="nx">iv</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">16</span><span class="p">)</span>
  <span class="kr">const</span> <span class="nx">tag</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">16</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
  <span class="kr">const</span> <span class="nx">salt</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">32</span><span class="p">,</span> <span class="mi">64</span><span class="p">)</span>
  <span class="kr">const</span> <span class="nx">ciphertext</span> <span class="o">=</span> <span class="nx">text</span><span class="p">.</span><span class="nx">slice</span><span class="p">(</span><span class="mi">64</span><span class="p">,</span> <span class="nx">text</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span>

  <span class="c1">// Now we preform the decryption.
</span><span class="c1"></span>  <span class="kr">const</span> <span class="nx">key</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">scryptSync</span><span class="p">(</span><span class="nx">passphrase</span><span class="p">,</span> <span class="nx">salt</span><span class="p">,</span> <span class="mi">32</span><span class="p">)</span>
  <span class="kr">const</span> <span class="nx">decrypter</span> <span class="o">=</span> <span class="nx">crypto</span><span class="p">.</span><span class="nx">createDecipheriv</span><span class="p">(</span><span class="s1">&#39;aes-256-gcm&#39;</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">iv</span><span class="p">)</span>
  <span class="nx">decrypter</span><span class="p">.</span><span class="nx">setAuthTag</span><span class="p">(</span><span class="nx">tag</span><span class="p">)</span>
  <span class="kd">let</span> <span class="nx">decrypted</span> <span class="o">=</span> <span class="nx">decrypter</span><span class="p">.</span><span class="nx">update</span><span class="p">(</span><span class="nx">ciphertext</span><span class="p">)</span>
  <span class="nx">decrypted</span> <span class="o">+=</span> <span class="nx">decrypter</span><span class="p">.</span><span class="kr">final</span><span class="p">(</span><span class="p">)</span>

  <span class="k">return</span> <span class="nx">decrypted</span>
<span class="p">}</span>

</code></pre></div><p>A key thing to notice, Is the encoding back-and forth from a single base64 string, for the usecase of a discord bot I did not want to return output along the lines of</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;iv&#34;</span><span class="p">:</span> <span class="s2">&#34;xyz&#34;</span><span class="p">,</span>
  <span class="nt">&#34;salt&#34;</span><span class="p">:</span> <span class="s2">&#34;xyz&#34;</span><span class="p">,</span>
  <span class="nt">&#34;ciphertext&#34;</span><span class="p">:</span> <span class="s2">&#34;xyz&#34;</span><span class="p">,</span>
  <span class="nt">&#34;tag&#34;</span><span class="p">:</span> <span class="s2">&#34;xyz&#34;</span>
<span class="p">}</span>
</code></pre></div><p>Because that would scare non-technical users, and be harder to copy-paste (also people would feel like its less encrypted, even though its not.</p>
<p>In the end it works quite well, here is a screenshot of the bot encrypting-decrypting text.
<img src="/img/encrypt-bot.png" alt="Screenshot of discord bot"></p>
<p>Thanks for reading and I hope you learned something :)</p>
]]></content>
		</item>
		
		<item>
			<title>__index horror</title>
			<link>http://uli.rocks/posts/index_horror/</link>
			<pubDate>Wed, 14 Aug 2019 19:47:59 -0400</pubDate>
			
			<guid>http://uli.rocks/posts/index_horror/</guid>
			<description>The problem Lua is a great programming language, very nice for modding games and super simple.
lua has a feature called metatables they are super useful, this post talks about the metatable event __index
the __index metatable event allows you to do something special when a key is not found in a table, for example here is how it can be used to look in another table if a key is not found</description>
			<content type="html"><![CDATA[<h1 id="the-problem">The problem</h1>
<p><a href="https://www.lua.org/">Lua</a> is a great programming language, very nice for modding games and super simple.</p>
<p>lua has a feature called <a href="https://www.lua.org/pil/13.html">metatables</a> they are super useful, this post talks about the metatable event <code>__index</code></p>
<p>the <code>__index</code> metatable event allows you to do something special when a key is not found in a table, for example here is how it can be used to look in another table if a key is not found</p>
<div class="highlight"><pre class="chroma"><code class="language-lua" data-lang="lua"><span class="n">backup</span>  <span class="o">=</span> <span class="p">{</span><span class="n">bar</span> <span class="o">=</span> <span class="mi">20</span><span class="p">}</span>
<span class="n">myTable</span> <span class="o">=</span> <span class="p">{</span><span class="n">foo</span> <span class="o">=</span> <span class="mi">10</span><span class="p">}</span>

<span class="n">setmetatable</span><span class="p">(</span><span class="n">myTable</span><span class="p">,</span> <span class="p">{</span> <span class="n">__index</span> <span class="o">=</span> <span class="n">backup</span> <span class="p">}</span><span class="p">)</span>

<span class="n">print</span><span class="p">(</span><span class="n">myTable.foo</span><span class="p">)</span> <span class="c1">-- 10</span>
<span class="n">print</span><span class="p">(</span><span class="n">myTable.bar</span><span class="p">)</span> <span class="c1">-- 20</span>
</code></pre></div><p>this is great, now lets look at a what happened to me.</p>
<p>to set the scene, I was mocking an API so I could test that my library was calling the right functions.
This library was a wrapper around the api to provide additional functionality, this example is stupid but the real project can be found <a href="https://gitlab.com/0u/coords">here</a></p>
<p>Here's a simplified version of the mocked version of an api</p>
<div class="highlight"><pre class="chroma"><code class="language-lua" data-lang="lua"><span class="kd">local</span> <span class="n">api</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span>

<span class="c1">-- record api calls in here so that</span>
<span class="c1">-- i can assert the right calls are made in tests.</span>
<span class="n">api.calls</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span>

<span class="kr">function</span> <span class="nc">api</span><span class="p">.</span><span class="nf">foo</span><span class="p">(</span><span class="p">)</span>
  <span class="n">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">foo!</span><span class="s1">&#39;</span><span class="p">)</span>
  <span class="n">table.insert</span><span class="p">(</span><span class="n">api.calls</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">foo</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nc">api</span><span class="p">.</span><span class="nf">bar</span><span class="p">(</span><span class="p">)</span>
  <span class="n">print</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">bar!</span><span class="s1">&#39;</span><span class="p">)</span>
  <span class="n">table.insert</span><span class="p">(</span><span class="n">api.calls</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">bar</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kr">return</span> <span class="n">api</span>
</code></pre></div><p>Now for our library (adding some great functionality!)</p>
<div class="highlight"><pre class="chroma"><code class="language-lua" data-lang="lua"><span class="kd">local</span> <span class="n">api</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">api</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="kd">local</span> <span class="n">lib</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span>

<span class="kr">function</span> <span class="nc">lib</span><span class="p">.</span><span class="nf">foobar</span><span class="p">(</span><span class="p">)</span>
  <span class="n">api.foo</span><span class="p">(</span><span class="p">)</span>
  <span class="n">api.bar</span><span class="p">(</span><span class="p">)</span>
<span class="kr">end</span>

<span class="kr">function</span> <span class="nc">lib</span><span class="p">.</span><span class="nf">barfoo</span><span class="p">(</span><span class="p">)</span>
  <span class="n">api.bar</span><span class="p">(</span><span class="p">)</span>
  <span class="n">api.foo</span><span class="p">(</span><span class="p">)</span>
<span class="kr">end</span>

<span class="c1">-- we want to be backwards compatible with the old API so if a function is not</span>
<span class="c1">-- found then look in the api table for it.</span>
<span class="kr">return</span> <span class="n">setmetatable</span><span class="p">(</span><span class="n">lib</span><span class="p">,</span> <span class="p">{</span> <span class="n">__index</span> <span class="o">=</span> <span class="n">api</span> <span class="p">}</span><span class="p">)</span>
</code></pre></div><p>Now for our library tests</p>
<div class="highlight"><pre class="chroma"><code class="language-lua" data-lang="lua"><span class="kd">local</span> <span class="n">lib</span> <span class="o">=</span> <span class="n">require</span><span class="p">(</span><span class="s1">&#39;</span><span class="s1">lib</span><span class="s1">&#39;</span><span class="p">)</span>

<span class="c1">-- test the foobar function</span>
<span class="n">lib.foobar</span><span class="p">(</span><span class="p">)</span>
<span class="n">assert</span><span class="p">(</span><span class="n">lib.calls</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s1">foo</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="n">assert</span><span class="p">(</span><span class="n">lib.calls</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s1">bar</span><span class="s1">&#39;</span><span class="p">)</span>

<span class="c1">-- clear lib.calls then test the barfoo function</span>
<span class="n">lib.calls</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span>
<span class="n">lib.barfoo</span><span class="p">(</span><span class="p">)</span>
<span class="n">assert</span><span class="p">(</span><span class="n">lib.calls</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s1">bar</span><span class="s1">&#39;</span><span class="p">)</span>
<span class="n">assert</span><span class="p">(</span><span class="n">lib.calls</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="o">==</span> <span class="s1">&#39;</span><span class="s1">foo</span><span class="s1">&#39;</span><span class="p">)</span>
</code></pre></div><p>If you run this you'll get</p>
<pre><code>foo!
bar!
bar!
foo!
lua: lib_test.lua:11: assertion failed!
stack traceback:
        [C]: in function 'assert'
        lib_test.lua:11: in main chunk
        [C]: in ?
</code></pre><p>What happened?!? we can see that the functions are called in the right order from the output.</p>
<h2 id="the-bug">The bug</h2>
<p>While <em>reading</em> <code>lib.calls</code> works fine, the key is not found then lua looks in the <code>__index</code> table, finds it and returns the value, it's just that <em>writing</em> works differently.</p>
<p><em>writing</em> to a table in lua ignores <code>__index</code> and just adds the key to the uppermost table, so after the tests are ran the <code>lib</code> table looks like this (not exactly, the metatable is stored separately but this is a nice visualization)</p>
<div class="highlight"><pre class="chroma"><code class="language-lua" data-lang="lua"><span class="p">{</span>
  <span class="n">foobar</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="p">)</span> <span class="p">...</span> <span class="kr">end</span><span class="p">,</span>
  <span class="n">barfoo</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="p">)</span> <span class="p">...</span> <span class="kr">end</span><span class="p">,</span>

  <span class="n">calls</span>  <span class="o">=</span> <span class="p">{</span><span class="p">}</span>
  <span class="n">__index</span> <span class="o">=</span> <span class="p">{</span>
    <span class="n">calls</span> <span class="o">=</span> <span class="p">{</span><span class="s1">&#39;</span><span class="s1">foo</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">bar</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">bar</span><span class="s1">&#39;</span><span class="p">,</span> <span class="s1">&#39;</span><span class="s1">foo</span><span class="s1">&#39;</span><span class="p">}</span><span class="p">,</span>
    <span class="n">foo</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="p">)</span> <span class="p">...</span> <span class="kr">end</span><span class="p">,</span>
    <span class="n">bar</span> <span class="o">=</span> <span class="kr">function</span><span class="p">(</span><span class="p">)</span> <span class="p">...</span> <span class="kr">end</span><span class="p">,</span>
  <span class="p">}</span><span class="p">,</span>
<span class="p">}</span>
</code></pre></div><p>see! <code>calls</code> was added to the uppermost table instead of in <code>__index</code>, the mocked api adds to the <code>calls</code> table local to itself and we get this nasty bug.</p>
<h2 id="the-solution">The solution</h2>
<p>It's a bit ugly but we can force lua to write to the <code>__index</code> table like this</p>
<div class="highlight"><pre class="chroma"><code class="language-lua" data-lang="lua"><span class="n">getmetatable</span><span class="p">(</span><span class="n">lib</span><span class="p">)</span><span class="p">.</span><span class="n">__index.calls</span> <span class="o">=</span> <span class="p">{</span><span class="p">}</span>
</code></pre></div><p>That's about it, I hope you learned something and I hope you never need to go through debugging this :D</p>
]]></content>
		</item>
		
		<item>
			<title>First Post</title>
			<link>http://uli.rocks/posts/first-post/</link>
			<pubDate>Sun, 14 Jul 2019 21:49:05 +0200</pubDate>
			
			<guid>http://uli.rocks/posts/first-post/</guid>
			<description>This is my first blog post! just gonna test some markdown.
def my_first_function(): print(&amp;#34;i would never write a function this boring&amp;#34;) shell syntax highlighting?
if [ &amp;#34;$*&amp;#34; = &amp;#34;i like cats&amp;#34; ]; then echo &amp;#34;You have good taste&amp;#34; else echo &amp;#34;Get out of my sight&amp;#34; fi </description>
			<content type="html"><![CDATA[<p>This is my first blog post! just gonna test some markdown.</p>
<div class="highlight"><pre class="chroma"><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">my_first_function</span><span class="p">(</span><span class="p">)</span><span class="p">:</span>
  <span class="k">print</span><span class="p">(</span><span class="sa"></span><span class="s2">&#34;</span><span class="s2">i would never write a function this boring</span><span class="s2">&#34;</span><span class="p">)</span>
</code></pre></div><p>shell syntax highlighting?</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="k">if</span> <span class="o">[</span> <span class="s2">&#34;</span><span class="nv">$*</span><span class="s2">&#34;</span> <span class="o">=</span> <span class="s2">&#34;i like cats&#34;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
  <span class="nb">echo</span> <span class="s2">&#34;You have good taste&#34;</span>
<span class="k">else</span>
  <span class="nb">echo</span> <span class="s2">&#34;Get out of my sight&#34;</span>
<span class="k">fi</span>
</code></pre></div>]]></content>
		</item>
		
	</channel>
</rss>
